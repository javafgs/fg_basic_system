package ${package.Controller};
import com.baomidou.mybatisplus.core.conditions.query.QueryWrapper;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.beans.factory.annotation.Autowired;
import com.fg.system.common.api.FgResult;
import com.fg.system.common.util.FileUtils;
import com.fg.system.common.util.page.QueryRequest;
import com.fg.system.modules.base.BaseController;
import com.fg.system.common.annotation.Log;
import ${package.Entity}.${entity};
import ${package.Service}.${entity}Service;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.ResponseBody;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.List;
import java.util.Map;
import com.github.xiaoymin.knife4j.annotations.ApiOperationSupport;
import io.swagger.annotations.Api;
import io.swagger.annotations.ApiImplicitParam;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;

#if(${swagger2})
import io.swagger.annotations.Api;
#end
#if(${restControllerStyle})
import org.springframework.web.bind.annotation.RestController;
#else
#end
#if(${superControllerClassPackage})
import ${superControllerClassPackage};
#end

/**
 * <p>
 * $!{table.name} 前端控制器
 * </p>
 * @author ${author}
 * @since ${date}
 */
#if(${restControllerStyle})
@RestController
#else
@Controller
#end
#if(${swagger2})
@Api(tags = "${cfg.msgName}管理")
#end
@RequestMapping("/admin")
public class ${table.controllerName} extends BaseController {
        private Logger log=LoggerFactory.getLogger(this.getClass());

        @Autowired
        protected ${entity}Service ${table.entityPath}Service;

        @Log("获取${cfg.msgName}信息")
        @GetMapping("/${table.entityPath}")
        public String ${table.entityPath}(){
            return "admin/${table.entityPath}/${table.entityPath}";
        }

        #if(${swagger2})
        @ApiOperationSupport(order = 1)
        @ApiOperation(value = "新增",notes = "新增${cfg.msgName}")
        #end
        @Log("新增${cfg.msgName}")
        @PostMapping("/${table.entityPath}/add")
        @ResponseBody
        public FgResult add${entity}(${entity} ${table.entityPath}){
            try{
                this.${table.entityPath}Service.add${entity}(${table.entityPath});
                return FgResult.success("新增${cfg.msgName}成功！");
            }catch(Exception e){
                log.error("新增${cfg.msgName}失败",e);
                return FgResult.failed("新增${cfg.msgName}失败}，请联系网站管理员！");
            }
        }

        #if(${swagger2})
        @ApiOperationSupport(order = 5)
        @ApiOperation(value = "修改",notes = "修改${cfg.msgName}")
        #end
        @Log("修改${cfg.msgName}")
        @PostMapping("/update")
        @ResponseBody
        public FgResult updateJob(${entity} ${table.entityPath}){
                try{
                    this.${table.entityPath}Service.update${entity}(${table.entityPath});
                    return FgResult.success("修改${cfg.msgName}成功！");
                }catch(Exception e){
                    log.error("修改${cfg.msgName}失败",e);
                     return FgResult.failed("修改${cfg.msgName}失败，请联系网站管理员！");
                }
        }

        #if(${swagger2})
        @ApiOperationSupport(order = 10)
        @ApiOperation(value = "批量删除",notes = "批量删除定时任务")
        @ApiImplicitParam(required = true,value = "${cfg.msgName}id",name = "ids")
        #end
        @Log("删除${cfg.msgName}")
        @PostMapping("/${table.entityPath}/deleteBatch")
        @ResponseBody
        public FgResult delete${entity}(String ids){
            try{
                this.${table.entityPath}Service.delete${entity}Batch(ids);
                return FgResult.success("删除${cfg.msgName}成功！");
            }catch(Exception e){
                log.error("删除${cfg.msgName}失败",e);
                return FgResult.failed("删除${cfg.msgName}失败，请联系网站管理员！");
            }
        }

        #if(${swagger2})
        @ApiOperationSupport(order = 15)
        @ApiOperation(value = "分页查询",notes = "分页查询${cfg.msgName}数据")
        #end
        @GetMapping("/${table.entityPath}/list")
        @ResponseBody
        public Map<String, Object> ${table.entityPath}List(QueryRequest request,${entity} ${table.entityPath}){
                return selectByPageNumSize(request,()->this.${table.entityPath}Service.findAll${entity}(${table.entityPath}));
        }

        #if(${swagger2})
        @ApiOperationSupport(order = 20)
        @ApiOperation(value = "获取单条数据",notes = "获取单条${cfg.msgName}")
        @ApiImplicitParam(required = true,value = "${cfg.msgName}id",name = "${table.entityPath}Id")
        #end
        @GetMapping("/${table.entityPath}/get${entity}")
        @ResponseBody
        public FgResult getJob(Long ${table.entityPath}Id){
            try{
                ${entity} ${table.entityPath} = this.${table.entityPath}Service.find${entity}ById(${table.entityPath}Id);
                return FgResult.success(${table.entityPath});
            }catch(Exception e){
                log.error("获取${cfg.msgName}信息失败",e);
                return FgResult.failed("获取${cfg.msgName}信息失败，请联系网站管理员！");
            }
         }
    }